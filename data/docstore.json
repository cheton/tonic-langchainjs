[["0",{"pageContent":"import { Text } from '@tonic-ui/react';\n\n# Overview\n\n## [Notification](patterns/notification)\nProvides short, timely, and relevant information about the product to help users notice the important things and even take the follow-up actions.\n\n## Table and Table Toolbar (Basic)\n* Table: Allows you to organize data with efficiency.\n* Table toolbar: Combines the actions available for users to interact with the table below. The availabe actions of each table vary with the data type.\n\n## Breadcrumb / Page Title / Back Button\nHelps users know which screen they are located and allows to switch among screens.\n\n## Dropdown Menu - Filter with Icons\nIcons were useful when recognizing different filter items.\n\n## Error Handling\nDefines error messages, error components, and other error handling guidelines.\n\n## Empty Status\nHandles scenarios where the content in a screen or a container is empty.\n\n## Form Help Text\nProvides instructions or explanations to guide users to fill in form fields.","metadata":{"source":"docs/pages/patterns/index.mdx","loc":{"lines":{"from":1,"to":25}}}}],["1",{"pageContent":"## Empty Status\nHandles scenarios where the content in a screen or a container is empty.\n\n## Form Help Text\nProvides instructions or explanations to guide users to fill in form fields.\n\n## Loader\nA temporary placeholder for scenarios where the user is waiting for data rendering or system reaction, for example, loading, validating, and uploading.\n\n## Preview Feature Handling\nProvides disclaimers for features that are not an official release and are excluded from SLA warranties, if applicable.\n\n## Risk Levels\nDefines how to display the risk level in different places.\n\n## Secondary Container\nA container with the content that does not show in the first layer of a product console but is wrapped in a drawer or a modal.\n\n## Secondary Container - Drawer Behavior\n* Drawer footer buttons\n* Drawer interaction \n* Drawer dismissal\n\n## Status Indicators\nHighlights a screen element and provides information that requires user attention, for example, status change, validation error, and updates.","metadata":{"source":"docs/pages/patterns/index.mdx","loc":{"lines":{"from":25,"to":49}}}}],["2",{"pageContent":"## Status Indicators\nHighlights a screen element and provides information that requires user attention, for example, status change, validation error, and updates.\n\n## Text Overflow Handling\nText overflow happens when a text string is too long to fit into the available UI Control. It might happen after a text string is translated into another language, or the UI Control is resized by user or automatically by the system in a fluid, dynamic layout.","metadata":{"source":"docs/pages/patterns/index.mdx","loc":{"lines":{"from":49,"to":53}}}}],["3",{"pageContent":"import {\n  Alert,\n  AlertCloseButton,\n  Button,\n  Collapse,\n  Flex,\n  Icon,\n  Stack,\n  Text,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef } from 'react';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    \n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    \n  );\n};\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  \n));\nAlertOutlineActionButton.displayName = 'AlertOutlineActionButton';","metadata":{"source":"docs/pages/patterns/notification/alert-outline.js","loc":{"lines":{"from":1,"to":33}}}}],["4",{"pageContent":"const App = () => {\n  return (\n    \n      \n        {({ onClose }) => (\n          }\n            onClose={onClose}\n            sx={{\n              borderImageSource: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n              borderImageSlice: 1,\n            }}\n          >\n            \n              This is a promotion message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an error message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is a warning message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an info message.","metadata":{"source":"docs/pages/patterns/notification/alert-outline.js","loc":{"lines":{"from":35,"to":87}}}}],["5",{"pageContent":"Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an info message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is a success message.\n            \n            \n          \n        )}\n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/alert-outline.js","loc":{"lines":{"from":87,"to":119}}}}],["6",{"pageContent":"export default App;","metadata":{"source":"docs/pages/patterns/notification/alert-outline.js","loc":{"lines":{"from":121,"to":121}}}}],["7",{"pageContent":"import {\n  Alert,\n  AlertCloseButton,\n  Button,\n  Collapse,\n  Flex,\n  Icon,\n  Stack,\n  Text,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef } from 'react';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    \n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    \n  );\n};\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  \n));\nAlertSolidActionButton.displayName = 'AlertSolidActionButton';","metadata":{"source":"docs/pages/patterns/notification/alert-solid.js","loc":{"lines":{"from":1,"to":33}}}}],["8",{"pageContent":"const App = () => {\n  return (\n    \n      \n        {({ onClose }) => (\n          }\n            onClose={onClose}\n            sx={{\n              background: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n              color: 'white:emphasis',\n            }}\n          >\n            \n              This is a promotion message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an error message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is a warning message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an info message.","metadata":{"source":"docs/pages/patterns/notification/alert-solid.js","loc":{"lines":{"from":35,"to":87}}}}],["9",{"pageContent":"Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is an info message.\n              \n                Action\n              \n            \n            \n          \n        )}\n      \n      \n        {({ onClose }) => (\n          \n            \n              This is a success message.\n            \n            \n          \n        )}\n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/alert-solid.js","loc":{"lines":{"from":87,"to":119}}}}],["10",{"pageContent":"export default App;","metadata":{"source":"docs/pages/patterns/notification/alert-solid.js","loc":{"lines":{"from":121,"to":121}}}}],["11",{"pageContent":"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Icon,\n  Text,\n  Toast,\n  useColorMode,\n  useColorStyle,\n  useToastManager,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst MAX_TOASTS = 3;\n\nconst App = () => {\n  const toast = useToastManager();\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();","metadata":{"source":"docs/pages/patterns/notification/app-toast.js","loc":{"lines":{"from":1,"to":22}}}}],["12",{"pageContent":"const App = () => {\n  const toast = useToastManager();\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          This is a success message.\n          The toast will be automatically dismissed after 5 seconds.\n        \n      ),\n      info: (\n        <>\n          This is an info message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      warning: (\n        <>\n          This is a warning message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      error: (\n        <>\n          This is an error message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n    }[appearance];\n\n    const placement = 'bottom-right';\n    const duration = appearance === 'success' ? 5000 : undefined;\n    const options = {\n      placement,\n      duration,\n    };","metadata":{"source":"docs/pages/patterns/notification/app-toast.js","loc":{"lines":{"from":22,"to":61}}}}],["13",{"pageContent":"const placement = 'bottom-right';\n    const duration = appearance === 'success' ? 5000 : undefined;\n    const options = {\n      placement,\n      duration,\n    };\n\n    toast.notify(({ onClose, placement }) => {\n      const styleProps = {\n        'top-left': { pt: '2x', px: '4x' },\n        'top': { pt: '2x', px: '4x' },\n        'top-right': { pt: '2x', px: '4x' },\n        'bottom-left': { pb: '2x', px: '4x' },\n        'bottom': { pb: '2x', px: '4x' },\n        'bottom-right': { pb: '2x', px: '4x' },\n      }[placement];\n\n      return (\n        \n          \n            \n              {content}\n            \n          \n        \n      );\n    }, options);\n\n    // Limit the maximum number of toasts\n    toast.setState(prevState => ({\n      ...prevState,\n      [placement]: prevState[placement].slice(-MAX_TOASTS),\n    }));\n  };\n\n  const handleClickCloseToasts = () => {\n    toast.closeAll();\n  };","metadata":{"source":"docs/pages/patterns/notification/app-toast.js","loc":{"lines":{"from":61,"to":98}}}}],["14",{"pageContent":"const handleClickCloseToasts = () => {\n    toast.closeAll();\n  };\n\n  return (\n    \n       *:not(:first-of-type)': {\n            marginLeft: -1\n          },\n          '> *': {\n            columnGap: '2x',\n          },\n        }}\n      >\n        \n          \n          Success\n        \n        \n          \n          Info\n        \n        \n          \n          Warning\n        \n        \n          \n          Error\n        \n      \n      \n        Close All\n      \n    \n  );\n};\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    \n  );\n};\n\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/app-toast.js","loc":{"lines":{"from":98,"to":147}}}}],["15",{"pageContent":"import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport React, { forwardRef } from 'react';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      \n    ));\n  };\n\n  return (\n    <>\n      \n        Open Drawer\n      \n    \n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);","metadata":{"source":"docs/pages/patterns/notification/drawer-alert.js","loc":{"lines":{"from":1,"to":45}}}}],["16",{"pageContent":"const DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    \n      \n      \n        \n          Drawer\n        \n        \n          \n             toggleIsAlertOpen(false)}\n              severity=\"info\"\n              variant=\"outline\"\n              mb=\"4x\"\n            >\n              Important:\n              This is an important message.\n              Learn more\n            \n          \n          \n            \n            \n            \n          \n        \n        \n          \n            \n              OK\n            \n            \n              Cancel\n            \n          \n        \n      \n    \n  );\n});\n\nDrawerExample.displayName = 'DrawerExample';\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/drawer-alert.js","loc":{"lines":{"from":45,"to":96}}}}],["17",{"pageContent":"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Icon,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from '@tonic-ui/react';\nimport React, { forwardRef, useRef, useState } from 'react';\nimport { TransitionGroup } from 'react-transition-group';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      \n    ));\n  };\n\n  return (\n    <>\n      \n        Open Drawer\n      \n    \n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };","metadata":{"source":"docs/pages/patterns/notification/drawer-toast.js","loc":{"lines":{"from":1,"to":60}}}}],["18",{"pageContent":"const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();","metadata":{"source":"docs/pages/patterns/notification/drawer-toast.js","loc":{"lines":{"from":60,"to":91}}}}],["19",{"pageContent":"const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          This is a success message.\n          The toast will be automatically dismissed after 5 seconds.\n        \n      ),\n      info: (\n        <>\n          This is an info message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      warning: (\n        <>\n          This is a warning message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      error: (\n        <>\n          This is an error message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === 'success') ? 5000 : undefined,\n    });\n  };","metadata":{"source":"docs/pages/patterns/notification/drawer-toast.js","loc":{"lines":{"from":91,"to":127}}}}],["20",{"pageContent":"return (\n    \n      \n      \n        \n          ` element\n          >\n            {toasts.map(toast => (\n              \n                \n                  \n                    {toast?.content}\n                  \n                \n              \n            ))}\n          \n        \n        \n          Drawer\n        \n        \n          \n            \n              \n              \n              \n            \n          \n           *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            \n              \n              Success\n            \n            \n              \n              Info\n            \n            \n              \n              Warning\n            \n            \n              \n              Error\n            \n          \n        \n        \n          \n            \n              OK\n            \n            \n              Cancel\n            \n          \n        \n      \n    \n  );\n});\n\nDrawerExample.displayName = 'DrawerExample';","metadata":{"source":"docs/pages/patterns/notification/drawer-toast.js","loc":{"lines":{"from":129,"to":196}}}}],["21",{"pageContent":"DrawerExample.displayName = 'DrawerExample';\n\nconst CustomToastContainer = (props) => (\n  \n);\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/drawer-toast.js","loc":{"lines":{"from":196,"to":202}}}}],["22",{"pageContent":"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Icon,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'outline',\n    severity: 'none',\n    icon: (\n      \n    ),\n    sx: {\n      borderImageSource: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      borderImageSlice: 1,\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":1,"to":49}}}}],["23",{"pageContent":"const App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    \n      \n      \n        \n          \n        \n        \n          Home\n        \n      \n    \n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    \n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":51,"to":86}}}}],["24",{"pageContent":"const IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":88,"to":123}}}}],["25",{"pageContent":"return (\n    \n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  \n));\nAlertOutlineActionButton.displayName = 'AlertOutlineActionButton';\n\nconst AlertView = () => {\n  const [page, ] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    \n      {({ onClose }) => (\n        \n          \n            {alert.message}\n            \n              \n                Action\n              \n            \n          \n          \n        \n      )}\n    \n  );\n};\n\nconst NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":125,"to":177}}}}],["26",{"pageContent":"useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    \n      \n        \n          Product Name\n        \n        \n        \n          Home\n        \n      \n      \n        \n          \n          {date.toLocaleDateString()}\n          {date.toLocaleTimeString()}\n        \n        \n        \n          \n            \n          \n        \n      \n    \n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":177,"to":235}}}}],["27",{"pageContent":"return (\n    \n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    \n  );\n};\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/in-app-alert.js","loc":{"lines":{"from":235,"to":256}}}}],["28",{"pageContent":"import { Alert, Box, Flex, Grid, Icon, Text, TextLabel } from '@tonic-ui/react';\n\n# Notification\n\n## Overview\n\nNotifications proactively provide short, timely, and relevant information about the product to help users notice important things and even take follow-up actions.\n\nThere are various channels to notify users:\n\n* Notification center\n* Alert\n* Toast\n\n## How It Works\n\n### Notification center\n\nProduct-level system notifications can be placed on the **Informative** tab of the notification center with the following types:\n* Success: Indicates that a system task is successfully executed.\n* Error: Indicates that a system error occurs and requires users to take actions.\n* Information: Indicates that a system change happens and might temporarily affect users, for example, system maintenance.\n* Attack related: Informs users of attack related information and leads users to learn about the impact.\n* New feature: Informs users of a new feature and leads users to learn more about the feature.","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":1,"to":24}}}}],["29",{"pageContent":"{render('./notification-center')}\n\nNotifications about user-initiated system tasks that require some time to complete can be placed on the **Tasks** tab of the notification center. A notification is triggered when the task status changes.\nA task can have the following statuses:\n* Task successful: Informs users that a task is successfully executed. You can add a shortcut button to guide users to take follow-up actions. For example, adding a **Download** button when a file is ready to be exported.\n* Request pending: Informs users that a task requires manual approval.\n* Task unsuccessful: Informs users that a task fails to be executed and leads users to the corresponding screen to view an error message that explain the failure.\n\nFor more information, see [notification center guideline](https://www.figma.com/file/Y1PF38zpyzA15XwBAdAb7f/Notification-Center?node-id=576%3A0&fuid=847002822432287235).\n\n### Alert\n\n#### Product-level alert","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":26,"to":38}}}}],["30",{"pageContent":"### Alert\n\n#### Product-level alert\n\nFor product-level alerts, place an [alert](../components/alert) banner above the product name bar. The alert can be dismissed manually by the user or automatically by the system after the call to action is completed.\n\nAn alert has the following types:\n* Error: Informs users that a problem has occurred, for example, license expiration, and requires users to take actions.\n* Warning: Informs users to prevent an imminent problem, for example, license about to expire.\n\n{render('./alert-solid')}\n\nWhen multiple alerts are present, they are prioritized in the following order:\n\n\n  \n    }\n      sx={{\n        background: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n        color: 'white:primary',\n      }}\n    >\n      Promotion\n    \n    \n    \n      Error\n    \n    \n    \n      Warning\n    \n    \n    \n      Info\n    \n  \n\n\n{render('./product-alert')}\n\n#### In-app alert","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":38,"to":79}}}}],["31",{"pageContent":"{render('./product-alert')}\n\n#### In-app alert\n\nFor alerts that are related to a screen or a feature only, show the alert banner in the associated screen or feature. The alert can be placed in different modules to fit different use cases. For example, place it in the upper part of a screen, a drawer, or a modal.\n\nAn in-app alert has the following types:\n* Promotion: Used only when there is a solution or offering to promote.\n* Error: Informs users that a problem has occurred and requires users to take actions.\n* Warning: Informs users of potential problems that may not require immediate action or to prevent an imminent problem\n* Info: Provides useful, relevant information to users.\n\n{render('./alert-outline')}\n\n{render('./in-app-alert')}\n\n#### Alert in modal and drawer\n\n{render('./modal-alert')}\n\n{render('./drawer-alert')}\n\n### Toast","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":79,"to":101}}}}],["32",{"pageContent":"{render('./alert-outline')}\n\n{render('./in-app-alert')}\n\n#### Alert in modal and drawer\n\n{render('./modal-alert')}\n\n{render('./drawer-alert')}\n\n### Toast\n\n[Toast](../components/toast) provides simple feedback for user-initiated actions or information that users need to complete the current task. Place a toast on the bottom right of a screen. Toasts can be chronologically piled up when there are multiple and pushed down when a previous toast is dismissed.\n\nA toast can be classified into the following types:\n* Success: The toast will be automatically dismissed after 5 seconds.\n* Info/Warning/Error: The toast will remain visible until the user dismisses it.\n\n#### App toast\n\n{render('./app-toast')}\n\n#### Toast in modal and drawer\n\nIn scenarios where there is limited space, such as within a modal or drawer, the toast should be positioned between the title and the content. When the limited space is closed, the toast will be automatically dismissed.","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":101,"to":125}}}}],["33",{"pageContent":"In the examples below, the toast will be positioned 48 pixels from the top of the modal or drawer, and has a minimum width of 280 pixels. If the content of the toast message is wider than 280 pixels, the toast will expand to fit the content without exceeding 80% of the width of the modal or drawer in which it is being displayed.\n\nTo animate the toast when it is displayed or dismissed, you can use the `ToastTransition` component. The `ToastController` component can also be used to control the duration for which the toast will be displayed before it is automatically dismissed. This allows you to set a specific amount of time for the toast to be visible, ensuring that it does not interrupt the user's workflow for too long.\n\n{render('./modal-toast')}\n\n{render('./drawer-toast')}\n\n## See Also","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":127,"to":135}}}}],["34",{"pageContent":"{render('./modal-toast')}\n\n{render('./drawer-toast')}\n\n## See Also\n\n\n  \n    React Components\n    Patterns\n    \n      * [Modal](../components/modal)\n      * [Drawer](../components/drawer)\n    \n    \n      * [Error Handling](https://www.figma.com/file/N84ebgxXVKZTMVClV2x0VP/Pattern-guideline?node-id=820%3A26&t=azm7arGGygd4x13e-3&fuid=847002822432287235)","metadata":{"source":"docs/pages/patterns/notification/index.mdx","loc":{"lines":{"from":135,"to":150}}}}],["35",{"pageContent":"import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport React, { forwardRef } from 'react';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      \n    ));\n  };\n\n  return (\n    <>\n      \n        Open Modal\n      \n    \n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);","metadata":{"source":"docs/pages/patterns/notification/modal-alert.js","loc":{"lines":{"from":1,"to":45}}}}],["36",{"pageContent":"const ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    \n      \n      \n        \n          Modal\n        \n        \n          \n             toggleIsAlertOpen(false)}\n              severity=\"warning\"\n              variant=\"outline\"\n              mb=\"4x\"\n            >\n              Important:\n              This is an important message.\n              Learn more\n            \n          \n          \n            \n            \n            \n          \n        \n        \n          \n            \n              OK\n            \n            \n              Cancel\n            \n          \n        \n      \n    \n  );\n});\n\nModalExample.displayName = 'ModalExample';\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/modal-alert.js","loc":{"lines":{"from":45,"to":96}}}}],["37",{"pageContent":"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Icon,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from '@tonic-ui/react';\nimport React, { forwardRef, useRef, useState } from 'react';\nimport { TransitionGroup } from 'react-transition-group';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      \n    ));\n  };\n\n  return (\n    <>\n      \n        Open Modal\n      \n    \n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };","metadata":{"source":"docs/pages/patterns/notification/modal-toast.js","loc":{"lines":{"from":1,"to":60}}}}],["38",{"pageContent":"const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();","metadata":{"source":"docs/pages/patterns/notification/modal-toast.js","loc":{"lines":{"from":60,"to":91}}}}],["39",{"pageContent":"const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          This is a success message.\n          The toast will be automatically dismissed after 5 seconds.\n        \n      ),\n      info: (\n        <>\n          This is an info message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      warning: (\n        <>\n          This is a warning message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n      error: (\n        <>\n          This is an error message.\n          The toast will remain visible until the user dismisses it.\n        \n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === 'success') ? 5000 : undefined,\n    });\n  };","metadata":{"source":"docs/pages/patterns/notification/modal-toast.js","loc":{"lines":{"from":91,"to":127}}}}],["40",{"pageContent":"return (\n    \n      \n      \n        \n          ` element\n          >\n            {toasts.map(toast => (\n              \n                \n                  \n                    {toast?.content}\n                  \n                \n              \n            ))}\n          \n        \n        \n          Modal\n        \n        \n          \n            \n              \n              \n              \n            \n          \n           *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            \n              \n              Success\n            \n            \n              \n              Info\n            \n            \n              \n              Warning\n            \n            \n              \n              Error\n            \n          \n        \n        \n          \n            \n              OK\n            \n            \n              Cancel\n            \n          \n        \n      \n    \n  );\n});\n\nModalExample.displayName = 'ModalExample';","metadata":{"source":"docs/pages/patterns/notification/modal-toast.js","loc":{"lines":{"from":129,"to":196}}}}],["41",{"pageContent":"ModalExample.displayName = 'ModalExample';\n\nconst CustomToastContainer = (props) => (\n  \n);\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/modal-toast.js","loc":{"lines":{"from":196,"to":202}}}}],["42",{"pageContent":"import {\n  Badge,\n  Box,\n  ButtonBase,\n  Divider,\n  Flex,\n  Icon,\n  Image,\n  Menu,\n  MenuContent,\n  MenuToggle,\n  Scrollbar,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useEffectOnce, useToggle } from '@tonic-ui/react-hooks';\nimport { formatDistance, formatISO, startOfToday, subDays, subMinutes, subSeconds } from 'date-fns';\nimport { ensureString } from 'ensure-type';\nimport React, { useEffect } from 'react';\n\nconst BASE_PATH = ensureString(process.env.BASE_PATH);","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":1,"to":28}}}}],["43",{"pageContent":"const notifications = [\n  {\n    id: 1,\n    seen: true,\n    icon: (\n      \n    ),\n    message: (\n      \n        Place your highlight message here.\n      \n    ),\n    time: startOfToday(subDays(new Date(), 2)).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        Place your success message here.\n      \n    ),\n    time: subSeconds(new Date(), 30).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        Place your error message here.\n      \n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 4,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        Place your warning message here.\n      \n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n  {\n    id: 5,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        Place your info message here.\n      \n    ),\n    time: subMinutes(new Date(), 60).getTime(),\n  },\n];","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":30,"to":96}}}}],["44",{"pageContent":"const tasks = [\n  {\n    id: 1,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        \n          Place your progessive message here.\n        \n        \n          Pending\n        \n      \n    ),\n    time: subSeconds(new Date(), 10).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        \n          Place your success message here.\n        \n        \n          Successful\n        \n      \n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      \n    ),\n    message: (\n      \n        \n          Place your error message here.\n        \n        \n          Unsuccessful\n        \n      \n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":98,"to":160}}}}],["45",{"pageContent":"const App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    \n      \n      \n        \n          Home\n        \n      \n    \n  );\n};\n\nconst NavigationBar = (props) => {\n  const [isNotificationCenterOpen, toggleIsNotificationCenterOpen] = useToggle(false);\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;\n  const unreadCount = notificationUnreadCount + taskUnreadCount;","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":160,"to":202}}}}],["46",{"pageContent":"useEffectOnce(() => {\n    toggleIsNotificationCenterOpen(true);\n  });\n\n  return (\n    \n      \n        \n          Product Name\n        \n        \n        \n          Home\n        \n      \n      \n        \n          \n          {date.toLocaleDateString()}\n          {date.toLocaleTimeString()}\n        \n        \n         toggleIsNotificationCenterOpen(false)}\n          onOpen={() => toggleIsNotificationCenterOpen(true)}\n          closeOnBlur={false}\n          placement=\"bottom-end\"\n          offset={[0, 1]}\n        >\n          \n            \n              \n                \n              \n            \n          \n          \n            \n          \n        \n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":204,"to":246}}}}],["47",{"pageContent":"const NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    \n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":248,"to":284}}}}],["48",{"pageContent":"return (\n    \n  );\n};\n\nconst NotificationCenter = (props) => {\n  const [colorStyle] = useColorStyle();\n  const tabStyleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    fontSize: 'sm',\n    lineHeight: 'sm',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    px: '3x',\n    py: '10q',\n    _selected: {\n      backgroundColor: colorStyle.background.tertiary,\n    },\n  };\n  const tabPanelStyleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n  };\n  const now = new Date().getTime();\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":284,"to":309}}}}],["49",{"pageContent":"return (\n    \n      \n        \n          Notifications ({notificationUnreadCount})\n        \n        \n          Tasks ({taskUnreadCount})\n        \n      \n      \n        \n          {notifications.length === 0 && (\n            \n              \n                \n              \n              \n                No notifications to display\n              \n            \n          )}\n          {notifications.length > 0 && (\n            \n              {notifications.map((notification) => (\n                \n                  \n                    \n                      {!notification.seen && (\n                        \n                      )}\n                      {notification.icon}\n                    \n                    \n                      \n                        {notification.message}\n                      \n                      {!!notification.time && (\n                        \n                          {formatDistance(notification.time, now, { addSuffix: true })}","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":311,"to":350}}}}],["50",{"pageContent":"{!!notification.time && (\n                        \n                          {formatDistance(notification.time, now, { addSuffix: true })}\n                          {' '}\n                          {`(${formatISO(notification.time)})`}\n                        \n                      )}\n                    \n                  \n                \n              ))}\n            \n          )}\n        \n        \n          {tasks.length === 0 && (\n            \n              \n                \n              \n              \n                No tasks to display\n              \n            \n          )}\n          {tasks.length > 0 && (\n            \n              {tasks.map((task) => (\n                \n                  \n                    \n                      {!task.seen && (\n                        \n                      )}\n                      {task.icon}","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":350,"to":384}}}}],["51",{"pageContent":"{!task.seen && (\n                        \n                      )}\n                      {task.icon}\n                    \n                    \n                      \n                        {task.message}\n                      \n                      {!!task.time && (\n                        \n                          {formatDistance(task.time, now, { addSuffix: true })}\n                          {' '}\n                          {`(${formatISO(task.time)})`}\n                        \n                      )}\n                    \n                  \n                \n              ))}\n            \n          )}\n        \n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":384,"to":410}}}}],["52",{"pageContent":"const NotificationCenterItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n    borderBottom: 1,\n    borderBottomColor: borderColor,\n    px: '4x',\n    py: '4x',\n    textAlign: 'left',\n    width: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n  };\n\n  return (\n    \n  );\n};\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/notification-center.js","loc":{"lines":{"from":412,"to":437}}}}],["53",{"pageContent":"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Icon,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'solid',\n    severity: 'none',\n    icon: (\n      \n    ),\n    sx: {\n      background: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      color: 'white:emphasis',\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":1,"to":49}}}}],["54",{"pageContent":"const App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    \n      \n      \n      \n        \n          Home\n        \n      \n    \n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    \n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":51,"to":84}}}}],["55",{"pageContent":"const IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":86,"to":121}}}}],["56",{"pageContent":"return (\n    \n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertPagination = forwardRef((\n  {\n    page,\n    count,\n    onPrevious,\n    onNext,\n    ...rest\n  },\n  ref,\n) => (\n  \n    \n      \n    \n    \n      {page}/{count}\n    \n    = count}\n      onClick={onNext}\n    >\n      \n    \n  \n));\nAlertPagination.displayName = 'AlertPagination';\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  \n));\nAlertSolidActionButton.displayName = 'AlertSolidActionButton';\n\nconst AlertView = () => {\n  const [page, setPage] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    \n      {({ onClose }) => (\n        \n          \n            {alert.message}\n            \n              \n                Action\n              \n               setPage(Math.max(1, page - 1))}\n                onNext={() => setPage(Math.min(alerts.length, page + 1))}\n                my=\"-2x\"\n              />\n            \n          \n          \n        \n      )}\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":123,"to":185}}}}],["57",{"pageContent":"const NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    \n      \n        \n          Product Name\n        \n        \n        \n          Home\n        \n      \n      \n        \n          \n          {date.toLocaleDateString()}\n          {date.toLocaleTimeString()}\n        \n        \n        \n          \n            \n          \n        \n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":187,"to":233}}}}],["58",{"pageContent":"const NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    \n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    \n  );\n};\n\nexport default App;","metadata":{"source":"docs/pages/patterns/notification/product-alert.js","loc":{"lines":{"from":235,"to":273}}}}],["59",{"pageContent":"import {\n  Button,\n  Flex,\n  Icon,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  SearchInput,\n  Text,\n} from '@tonic-ui/react';\nimport React, { Fragment, useCallback, useMemo, useState } from 'react';\nimport FilterButton from './components/FilterButton';\nimport DropdownFilterTag from './components/DropdownFilterTag';\nimport MultiselectFilterTag from './components/MultiselectFilterTag';\nimport InputFilterTag from './components/InputFilterTag';\n\nconst App = () => {\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const allFilters = useMemo(() => [\n    {\n      id: 'deviceType',\n      name: 'Device type',\n      render: (props) => (\n        \n      ),\n    },\n    {\n      id: 'displayName',\n      name: 'Display name',\n      render: (props) => (\n        \n      ),\n    },\n    {\n      id: 'osType',\n      name: 'OS type',\n      render: (props) => (\n        \n      ),\n    },\n  ], []);","metadata":{"source":"docs/pages/patterns/table-display/advanced-filter.js","loc":{"lines":{"from":1,"to":42}}}}],["60",{"pageContent":"const [selectedFilters, setSelectedFilters] = useState([]);\n  const unselectedFilters = useMemo(() => {\n    const selectedFilterIds = selectedFilters.map(({ id }) => id);\n    return allFilters.filter((filter) => !selectedFilterIds.includes(filter.id));\n  }, [allFilters, selectedFilters]);\n\n  const clearSelectedFilters = useCallback(() => {\n    setSelectedFilters([]);\n  }, []);","metadata":{"source":"docs/pages/patterns/table-display/advanced-filter.js","loc":{"lines":{"from":44,"to":52}}}}],["61",{"pageContent":"return (\n    \n       {\n          const { value } = event.target;\n          setSearchInputValue(value);\n        }}\n        onClearInput={() => {\n          setSearchInputValue('');\n        }}\n        value={searchInputValue}\n      />\n      \n        \n          {({ getMenuToggleProps }) => (\n            \n              \n            \n          )}\n        \n        \n          {unselectedFilters.map((filter) => (\n             {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return [...prevSelectedFilters, filter];\n                });\n              }}\n            >\n              {filter.name}\n            \n          ))}\n        \n      \n      {selectedFilters.map((filter) => {\n        return (\n          \n            {filter.render({\n              value: filter.value,\n              onChange: (value) => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.map(prevSelectedFilter => {","metadata":{"source":"docs/pages/patterns/table-display/advanced-filter.js","loc":{"lines":{"from":54,"to":93}}}}],["62",{"pageContent":"onChange: (value) => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.map(prevSelectedFilter => {\n                    if (prevSelectedFilter.id !== filter.id) {\n                      return prevSelectedFilter;\n                    }\n                    return {\n                      ...prevSelectedFilter,\n                      value: value,\n                    };\n                  });\n                });\n              },\n              onClose: () => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.filter(\n                    (prevSelectedFilter) => prevSelectedFilter.id !== filter.id\n                  );\n                });\n              },\n            })}\n          \n        );\n      })}\n      {(selectedFilters.length > 0) && (\n         clearSelectedFilters()}\n        >\n           Clear\n        \n      )}\n    \n  );\n};","metadata":{"source":"docs/pages/patterns/table-display/advanced-filter.js","loc":{"lines":{"from":93,"to":125}}}}],["63",{"pageContent":"export default App;","metadata":{"source":"docs/pages/patterns/table-display/advanced-filter.js","loc":{"lines":{"from":127,"to":127}}}}],["64",{"pageContent":"import {\n  Flex,\n  OverflowTooltip,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureFunction } from 'ensure-type';\nimport React, { useMemo, useRef } from 'react';\nimport Dropdown from '@/components/Dropdown';\nimport FilterTag from './FilterTag';\n\nconst DropdownFilterTag = ({\n  label,\n  options: optionsProp,\n  value: valueProp = null,\n  onChange: onChangeProp,\n  onClose: onCloseProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const hasChangedValueRef = useRef(false);\n  const options = useMemo(() => {\n    return optionsProp.map(option => option.value);\n  }, [optionsProp]);\n  const optionMap = useMemo(() => {\n    return optionsProp.reduce((acc, option) => {\n      acc[option.value] = option;\n      return acc;\n    }, {});\n  }, [optionsProp]);","metadata":{"source":"docs/pages/patterns/table-display/components/DropdownFilterTag.js","loc":{"lines":{"from":1,"to":29}}}}],["65",{"pageContent":"return (\n     {\n        // The onChange callback will only be triggered when an option is selected\n        hasChangedValueRef.current = !!value;\n        onChangeProp(value);\n      }}\n      onClose={() => {\n        if (!valueProp && !hasChangedValueRef.current) {\n          ensureFunction(onCloseProp)();\n        }\n        hasChangedValueRef.current = false;\n      }}\n      renderOption={(value) => optionMap[value]?.label}\n      value={valueProp}\n    >\n       {\n          event.stopPropagation();\n          ensureFunction(onCloseProp)();\n        }}\n      >\n        \n          \n            {label}\n          \n          \n            {valueProp}\n          \n        \n      \n    \n  );\n};\n\nDropdownFilterTag.displayName = 'DropdownFilterTag';\n\nexport default DropdownFilterTag;","metadata":{"source":"docs/pages/patterns/table-display/components/DropdownFilterTag.js","loc":{"lines":{"from":31,"to":66}}}}],["66",{"pageContent":"import {\n  Button,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst FilterButton = forwardRef((props, ref) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    \n  );\n});\n\nFilterButton.displayName = 'FilterButton';\n\nexport default FilterButton;","metadata":{"source":"docs/pages/patterns/table-display/components/FilterButton.js","loc":{"lines":{"from":1,"to":17}}}}],["67",{"pageContent":"import {\n  Tag,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst FilterTag = forwardRef((\n  {\n    disabled,\n    ...rest\n  },\n  ref,\n) => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'gray:60',\n    light: 'gray:40',\n  }[colorMode];\n  const styleProps = {\n    borderRadius: '.75rem',\n    cursor: 'pointer',\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n    _disabled: {\n      cursor: 'not-allowed',\n      userSelect: 'none',\n    },\n  };\n\n  return (\n    \n  );\n});\n\nFilterTag.displayName = 'FilterTag';\n\nexport default FilterTag;","metadata":{"source":"docs/pages/patterns/table-display/components/FilterTag.js","loc":{"lines":{"from":1,"to":38}}}}],["68",{"pageContent":"import {\n  Box,\n  Button,\n  Flex,\n  Input,\n  OverflowTooltip,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  callEventHandlers,\n} from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport FilterTag from './FilterTag';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\n\nconst InputFilterTag = forwardRef((\n  {\n    label,\n    value: valueProp = '',\n    onChange: onChangeProp,\n    onClose: onCloseProp,\n    inputProps,\n    ...rest\n  },\n  ref,\n) => {\n  const isApplyButtonClickedRef = useRef(false);\n  const inputRef = useRef(null);\n  const [inputValue, setInputValue] = useState(valueProp ?? '');\n  const [colorStyle] = useColorStyle();\n\n  const handleInputChange = useCallback((event) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  const handleClickApplyButton = useCallback(() => {\n    ensureFunction(onChangeProp)(inputValue);\n\n    isApplyButtonClickedRef.current = true;","metadata":{"source":"docs/pages/patterns/table-display/components/InputFilterTag.js","loc":{"lines":{"from":1,"to":43}}}}],["69",{"pageContent":"const handleClickApplyButton = useCallback(() => {\n    ensureFunction(onChangeProp)(inputValue);\n\n    isApplyButtonClickedRef.current = true;\n\n    // Remove the focus from activeElement to close the popover\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n  }, [inputValue, onChangeProp]);\n\n  useEffect(() => {\n    // Ensure the input field is focused when it is displayed\n    const timeoutId = setTimeout(() => {\n      const el = inputRef.current;\n      el && el.focus();\n    }, 100);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);","metadata":{"source":"docs/pages/patterns/table-display/components/InputFilterTag.js","loc":{"lines":{"from":43,"to":64}}}}],["70",{"pageContent":"return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return (\n     {\n        // Handle the case when the user never clicked the apply button\n        if (!isApplyButtonClickedRef.current) {\n          if (!valueProp) {\n            // If the valueProp is empty, then we should close the popover\n            ensureFunction(onCloseProp)();\n          } else {\n            // If the valueProp is not empty, then we should reset the input value\n            setInputValue(valueProp);\n          }\n        }\n\n        isApplyButtonClickedRef.current = false;\n      }}\n      returnFocusOnClose={false}\n    >\n      \n         {\n            event.stopPropagation();\n            ensureFunction(onCloseProp)();\n          }}\n        >\n          \n            \n              {label}\n            \n            \n              {valueProp}\n            \n          \n        \n      \n      \n        \n          \n        \n        \n          \n            Apply\n          \n        \n      \n    \n  );\n});","metadata":{"source":"docs/pages/patterns/table-display/components/InputFilterTag.js","loc":{"lines":{"from":64,"to":114}}}}],["71",{"pageContent":"InputFilterTag.displayName = 'InputFilterTag';\n\nexport default InputFilterTag;","metadata":{"source":"docs/pages/patterns/table-display/components/InputFilterTag.js","loc":{"lines":{"from":116,"to":118}}}}],["72",{"pageContent":"import {\n  Flex,\n  OverflowTooltip,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureFunction } from 'ensure-type';\nimport React, { useMemo } from 'react';\nimport Multiselect from '@/components/Multiselect';\nimport FilterTag from './FilterTag';\n\nconst MultiselectFilterTag = ({\n  label,\n  options: optionsProp,\n  value: valueProp = null,\n  onChange: onChangeProp,\n  onClose: onCloseProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const options = useMemo(() => {\n    return optionsProp.map(option => option.value);\n  }, [optionsProp]);\n  const optionMap = useMemo(() => {\n    return optionsProp.reduce((acc, option) => {\n      acc[option.value] = option;\n      return acc;\n    }, {});\n  }, [optionsProp]);\n\n  return (\n     {\n        // The onChange callback will be triggered every time, regardless of whether an option was selected or not\n        onChangeProp(value);","metadata":{"source":"docs/pages/patterns/table-display/components/MultiselectFilterTag.js","loc":{"lines":{"from":1,"to":33}}}}],["73",{"pageContent":"return (\n     {\n        // The onChange callback will be triggered every time, regardless of whether an option was selected or not\n        onChangeProp(value);\n\n        if (value.length === 0) {\n          ensureFunction(onCloseProp)();\n        }\n      }}\n      renderOption={(value) => optionMap[value]?.label}\n      shouldSelectAllIfNoneSelected={false}\n      value={valueProp}\n    >\n       {\n          event.stopPropagation();\n          ensureFunction(onCloseProp)();\n        }}\n      >\n        \n          \n            {label}\n          \n          \n            {Array.isArray(valueProp) ? valueProp.map(value => optionMap[value]?.label).join(', ') : optionMap[valueProp]}\n          \n        \n      \n    \n  );\n};\n\nMultiselectFilterTag.displayName = 'MultiselectFilterTag';\n\nexport default MultiselectFilterTag;","metadata":{"source":"docs/pages/patterns/table-display/components/MultiselectFilterTag.js","loc":{"lines":{"from":33,"to":66}}}}],["74",{"pageContent":"import {\n  getExpandedRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Divider,\n  Icon,\n  Text,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useMemo, useRef } from 'react';\nimport BaseTable from '@/components/BaseTable';","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":1,"to":21}}}}],["75",{"pageContent":"const data = [\n  {\n    endpointId: '0d4523d9-ceed-4a9a-b3d0-056814ee8811',\n    endpointHostname: 'endpoint-1',\n    endpointIPs: ['fe80::c5a0:6dd9:1002:5760','10.1.136.130'],\n    endpointMAC: '00:50:56:9c:3c:5a',\n    eventId: 1,\n    eventSourceType: 1,\n    firstSeen: '2023-06-07T02:31:48Z',\n    lastSeen: '2023-06-07T02:31:48Z',\n    objectFirstSeen: '2023-06-07T02:27:34Z',\n    objectLastSeen: '2023-06-07T02:32:04Z',\n    objectIPs: [\n      '192.8.82.3',\n      '199.7.83.46',\n      '192.113.5.32',\n    ],\n    osDescription: 'Windows 10 Enterprise (64-bit) build 19044',\n    osType: '0x00000007',\n    osVer: '10.0.19044',\n    processCmd: 'C:\\\\Windows\\\\System32\\\\svchost.exe -k NetworkService -p -s NlaSvc',\n    processFileCreation: '2023-06-05T10:07:28Z',\n    processFileHashMD5: 'b7f884c1b74a263f746ee12a5f7c9f6a',\n    processFileHashSHA1: '1bc5066ddf693fc034d6514618854e26a84fd0d1',\n    processFileHashSHA256: 'add683a6910abbbf0e28b557fad0ba998166394932ae2aca069d9aa19ea8fe88',","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":23,"to":47}}}}],["76",{"pageContent":"processFileHashSHA1: '1bc5066ddf693fc034d6514618854e26a84fd0d1',\n    processFileHashSHA256: 'add683a6910abbbf0e28b557fad0ba998166394932ae2aca069d9aa19ea8fe88',\n    processFileModifiedTime: '2023-06-05T10:07:28Z',\n    processFileSize: 55320,\n    processLaunchTime: '2023-06-06T09:42:15Z',\n    processName: 'C:\\\\Windows\\\\System32\\\\svchost.exe',\n    processId: 1408,\n    processSigner: 'Microsoft Windows Publisher',\n    processSignerValid: true,\n    processUser: 'NETWORK SERVICE',\n    processUserDomain: 'NT AUTHORITY',\n    productCode: 'dummy',\n    productVersion: 'x.y.z',\n    sessionId: 0,\n    timezone: 'Pacific Standard Time',\n  },\n];","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":47,"to":63}}}}],["77",{"pageContent":"const App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'toggle-expanded',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          \n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Logged',\n      accessorKey: 'firstSeen',\n      size: 180,\n      cell: ({ row }) => {\n        return (\n          \n            {row.original?.firstSeen}\n          \n        );\n      },\n    },\n    {\n      id: 'details',\n      cell: ({ row }) => {\n        const entries = Object.entries(row.original);","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":65,"to":103}}}}],["78",{"pageContent":"return (\n          \n            {entries.map((item, index) => {\n              const [key, value] = item;\n              return (\n                \n                  {key}: {Array.isArray(value) ? value.join(',') : value}\n                  {(index < entries.length - 1) && (\n                    \n                  )}\n                \n              );\n            })}\n          \n        );\n      },\n      size: 'auto',\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  ], [colorMode, colorStyle]); // Include both colorMode and colorStyle as dependencies to prevent memoization when the color mode changes\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowCanExpand: () => true,\n  }), []);\n  const tableRef = useRef(null);","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":105,"to":132}}}}],["79",{"pageContent":"useEffect(() => {\n    if (tableRef.current) {\n      // Toggles the expanded state for all rows\n      tableRef.current.toggleAllRowsExpanded(true);\n    }\n  }, []);\n\n  return (\n    \n      \n    \n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    \n      \n    \n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;","metadata":{"source":"docs/pages/patterns/table-display/expandable-table-rows.js","loc":{"lines":{"from":134,"to":175}}}}],["80",{"pageContent":"import { Alert, Box, Flex, Grid, Icon, Text, TextLabel } from '@tonic-ui/react';\n\n# Table Display\n\n## Overview\n\nTable display is used for presenting data in a structured manner and typically consists of three main parts:\n* Toolbar\n* Data\n* Footer\n\n{render('./table-display')}\n\n## How It Works\n\n### Toolbar\n\nThe table toolbar provides a set of actions that users can perform on the table. The available actions may vary depending on the data type. The toolbar items are displayed from left to right.\n\nThe toolbar should never display a vertical scrollbar. The position and width of the right-sided toolbar are fixed.\n\nIn cases where the screen width is limited, the left-sided toolbar items can wrap to another row. These items may include, but are not limited to:\n* Primary action\n* Filter\n* Search input\n* Reset (optional)\n* Matched results (optional)\n\n{render('./table-toolbar')}","metadata":{"source":"docs/pages/patterns/table-display/index.mdx","loc":{"lines":{"from":1,"to":29}}}}],["81",{"pageContent":"{render('./table-toolbar')}\n\nWhen there are more than 5 filters, consider using an \"Advanced filter\" option. The filter options can be modified by clicking the corresponding icon. Stacked filter tags should be used when the screen width is limited.\n\n{render('./advanced-filter')}\n\n### Data\n\nIt is recommended to display all columns of the table. However, in certain scenarios, vertical scrolling may be necessary. For tables with rich data columns, you can utilize expandable table rows to accommodate the additional content.\n\n{render('./expandable-table-rows')}\n\n### Footer\n\nThe footer should be fixed at the bottom of the screen to ensure consistent positioning.\n\n## See Also\n\n\n  \n    React Components\n    \n      * [Table](../components/table)","metadata":{"source":"docs/pages/patterns/table-display/index.mdx","loc":{"lines":{"from":29,"to":51}}}}],["82",{"pageContent":"import {\n  getPaginationRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport BaseTable from '@/components/BaseTable';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport TablePagination from '@/components/TablePagination';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":1,"to":37}}}}],["83",{"pageContent":"const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectOptions = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      \n        {'Label:'}\n      \n      \n        {selectionText}\n      \n    \n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":39,"to":80}}}}],["84",{"pageContent":"const renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectOptions.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        \n          {'Label:'}\n        \n        \n          {selectionText}\n        \n      \n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        \n          {'Label:'}\n        \n        \n          {selectionText}\n        \n      \n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      \n        {'Label:'}\n      \n      \n        {selectionText}\n      \n      \n        {`(${selectionCount})`}\n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":80,"to":132}}}}],["85",{"pageContent":"const threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectOptions);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":134,"to":161}}}}],["86",{"pageContent":"const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectOptions);\n    setSearchInputValue('');\n  }, []);","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":163,"to":167}}}}],["87",{"pageContent":"const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        \n      ),\n      cell: ({ row }) => (\n        \n      ),\n      size: 48,\n    },\n    {\n      header: 'Endpoint',\n      cell: ({ getValue }) => (\n        {getValue()}\n      ),\n      accessorKey: 'endpoint',\n      size: 'auto',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        return getValue().toISOString();\n      },\n      size: 200,\n    },\n  ], []);\n\n  const tableRef = useRef();\n\n  const [rowSelection, setRowSelection] = useState({});\n  const [totalCount, setTotalCount] = useState(data.length);","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":169,"to":212}}}}],["88",{"pageContent":"const tableRef = useRef();\n\n  const [rowSelection, setRowSelection] = useState({});\n  const [totalCount, setTotalCount] = useState(data.length);\n\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n\n    // Pagination\n    getPaginationRowModel: getPaginationRowModel(),\n\n    // Row selection\n    enableRowSelection: row => true, // enable row selection conditionally\n    onRowSelectionChange: setRowSelection,\n  }), [rowSelection]);\n\n  useEffect(() => {\n    const table = tableRef.current;\n    setTotalCount(table ? table.getCoreRowModel().rows.length : 0);\n  }, []);\n\n  const pageHeight = 600;\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":212,"to":243}}}}],["89",{"pageContent":"return (\n    \n      \n        \n          \n            \n              Primary Action\n            \n            \n            \n              \n                \n                  {renderDropdownLabel(dropdownValue)}\n                \n              \n            \n            \n              \n                \n                  {renderMultiselectLabel(multiselectValue)}\n                \n              \n            \n             {\n                const { value } = event.target;\n                setSearchInputValue(value);\n              }}\n              onClearInput={() => {\n                setSearchInputValue('');\n              }}\n              value={searchInputValue}\n            />\n             clearFilters()}\n              sx={{\n                color: colorStyle.color.info,\n                _focus: {\n                  color: colorStyle.color.info,\n                },\n                columnGap: '1x',\n                mr: '3x',\n              }}\n            >\n               Clear","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":245,"to":287}}}}],["90",{"pageContent":"color: colorStyle.color.info,\n                },\n                columnGap: '1x',\n                mr: '3x',\n              }}\n            >\n               Clear\n            \n            \n              \n                Matched results:\n              \n              {matchedResults}\n            \n          \n          \n            \n              \n                \n              \n            \n            \n              \n                \n              \n            \n          \n        \n      \n      \n        \n      \n      \n         {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            tableRef.current.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            tableRef.current.setPageSize(pageSize);\n          }}\n        />\n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":287,"to":332}}}}],["91",{"pageContent":"export default App;","metadata":{"source":"docs/pages/patterns/table-display/table-display.js","loc":{"lines":{"from":334,"to":334}}}}],["92",{"pageContent":"import {\n  Button,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useCallback, useState } from 'react';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];\n\n  const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":1,"to":42}}}}],["93",{"pageContent":"const filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectItems = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      \n        {'Label:'}\n      \n      \n        {selectionText}\n      \n    \n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectItems.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        \n          {'Label:'}\n        \n        \n          {selectionText}\n        \n      \n    );\n  }","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":42,"to":93}}}}],["94",{"pageContent":"if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        \n          {'Label:'}\n        \n        \n          {selectionText}\n        \n      \n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        \n          {'Label:'}\n        \n        \n          {selectionText}\n        \n      \n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      \n        {'Label:'}\n      \n      \n        {selectionText}\n      \n      \n        {`(${selectionCount})`}\n      \n    \n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectItems);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":93,"to":142}}}}],["95",{"pageContent":"const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectItems);\n    setSearchInputValue('');\n  }, []);\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":144,"to":153}}}}],["96",{"pageContent":"return (\n    \n      \n        \n          Primary Action\n        \n        \n        \n          \n            \n              {renderDropdownLabel(dropdownValue)}\n            \n          \n        \n        \n          \n            \n              {renderMultiselectLabel(multiselectValue)}\n            \n          \n        \n         {\n            const { value } = event.target;\n            setSearchInputValue(value);\n          }}\n          onClearInput={() => {\n            setSearchInputValue('');\n          }}\n          value={searchInputValue}\n        />\n         clearFilters()}\n          sx={{\n            color: colorStyle.color.info,\n            _focus: {\n              color: colorStyle.color.info,\n            },\n            columnGap: '1x',\n            mr: '3x',\n          }}\n        >\n           Clear\n        \n        \n          \n            Matched results:\n          \n          {matchedResults}","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":155,"to":201}}}}],["97",{"pageContent":"Matched results:\n          \n          {matchedResults}\n        \n      \n      \n        \n          \n            \n          \n        \n        \n          \n            \n          \n        \n      \n    \n  );\n};","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":201,"to":220}}}}],["98",{"pageContent":"export default App;","metadata":{"source":"docs/pages/patterns/table-display/table-toolbar.js","loc":{"lines":{"from":222,"to":222}}}}]]